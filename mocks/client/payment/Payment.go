// Code generated by mockery. DO NOT EDIT.

package clientpayment

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"
)

// Payment is an autogenerated mock type for the Payment type
type Payment struct {
	mock.Mock
}

type Payment_Expecter struct {
	mock *mock.Mock
}

func (_m *Payment) EXPECT() *Payment_Expecter {
	return &Payment_Expecter{mock: &_m.Mock}
}

// Pay provides a mock function with given fields: ctx, ID, amount
func (_m *Payment) Pay(ctx context.Context, ID string, amount decimal.Decimal) (string, error) {
	ret := _m.Called(ctx, ID, amount)

	if len(ret) == 0 {
		panic("no return value specified for Pay")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, decimal.Decimal) (string, error)); ok {
		return rf(ctx, ID, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, decimal.Decimal) string); ok {
		r0 = rf(ctx, ID, amount)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, decimal.Decimal) error); ok {
		r1 = rf(ctx, ID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Payment_Pay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pay'
type Payment_Pay_Call struct {
	*mock.Call
}

// Pay is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
//   - amount decimal.Decimal
func (_e *Payment_Expecter) Pay(ctx interface{}, ID interface{}, amount interface{}) *Payment_Pay_Call {
	return &Payment_Pay_Call{Call: _e.mock.On("Pay", ctx, ID, amount)}
}

func (_c *Payment_Pay_Call) Run(run func(ctx context.Context, ID string, amount decimal.Decimal)) *Payment_Pay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(decimal.Decimal))
	})
	return _c
}

func (_c *Payment_Pay_Call) Return(_a0 string, _a1 error) *Payment_Pay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Payment_Pay_Call) RunAndReturn(run func(context.Context, string, decimal.Decimal) (string, error)) *Payment_Pay_Call {
	_c.Call.Return(run)
	return _c
}

// NewPayment creates a new instance of Payment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPayment(t interface {
	mock.TestingT
	Cleanup(func())
}) *Payment {
	mock := &Payment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
