// Code generated by mockery. DO NOT EDIT.

package transactionuc

import (
	context "context"

	model "github.com/arfan21/vocagame/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// NotificationProducer is an autogenerated mock type for the NotificationProducer type
type NotificationProducer struct {
	mock.Mock
}

type NotificationProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationProducer) EXPECT() *NotificationProducer_Expecter {
	return &NotificationProducer_Expecter{mock: &_m.Mock}
}

// Produce provides a mock function with given fields: ctx, event
func (_m *NotificationProducer) Produce(ctx context.Context, event model.Event) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for Produce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationProducer_Produce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Produce'
type NotificationProducer_Produce_Call struct {
	*mock.Call
}

// Produce is a helper method to define mock.On call
//   - ctx context.Context
//   - event model.Event
func (_e *NotificationProducer_Expecter) Produce(ctx interface{}, event interface{}) *NotificationProducer_Produce_Call {
	return &NotificationProducer_Produce_Call{Call: _e.mock.On("Produce", ctx, event)}
}

func (_c *NotificationProducer_Produce_Call) Run(run func(ctx context.Context, event model.Event)) *NotificationProducer_Produce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Event))
	})
	return _c
}

func (_c *NotificationProducer_Produce_Call) Return(_a0 error) *NotificationProducer_Produce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationProducer_Produce_Call) RunAndReturn(run func(context.Context, model.Event) error) *NotificationProducer_Produce_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotificationProducer creates a new instance of NotificationProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationProducer {
	mock := &NotificationProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
