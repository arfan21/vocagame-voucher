// Code generated by mockery. DO NOT EDIT.

package transactionuc

import (
	context "context"

	coreapi "github.com/midtrans/midtrans-go/coreapi"
	mock "github.com/stretchr/testify/mock"
)

// MidtransCoreAPI is an autogenerated mock type for the MidtransCoreAPI type
type MidtransCoreAPI struct {
	mock.Mock
}

type MidtransCoreAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MidtransCoreAPI) EXPECT() *MidtransCoreAPI_Expecter {
	return &MidtransCoreAPI_Expecter{mock: &_m.Mock}
}

// CheckTransaction provides a mock function with given fields: ctx, orderID
func (_m *MidtransCoreAPI) CheckTransaction(ctx context.Context, orderID string) (coreapi.TransactionStatusResponse, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for CheckTransaction")
	}

	var r0 coreapi.TransactionStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (coreapi.TransactionStatusResponse, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) coreapi.TransactionStatusResponse); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(coreapi.TransactionStatusResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MidtransCoreAPI_CheckTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckTransaction'
type MidtransCoreAPI_CheckTransaction_Call struct {
	*mock.Call
}

// CheckTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID string
func (_e *MidtransCoreAPI_Expecter) CheckTransaction(ctx interface{}, orderID interface{}) *MidtransCoreAPI_CheckTransaction_Call {
	return &MidtransCoreAPI_CheckTransaction_Call{Call: _e.mock.On("CheckTransaction", ctx, orderID)}
}

func (_c *MidtransCoreAPI_CheckTransaction_Call) Run(run func(ctx context.Context, orderID string)) *MidtransCoreAPI_CheckTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MidtransCoreAPI_CheckTransaction_Call) Return(_a0 coreapi.TransactionStatusResponse, _a1 error) *MidtransCoreAPI_CheckTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MidtransCoreAPI_CheckTransaction_Call) RunAndReturn(run func(context.Context, string) (coreapi.TransactionStatusResponse, error)) *MidtransCoreAPI_CheckTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMidtransCoreAPI creates a new instance of MidtransCoreAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMidtransCoreAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MidtransCoreAPI {
	mock := &MidtransCoreAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
