// Code generated by mockery. DO NOT EDIT.

package transactionuc

import (
	context "context"

	model "github.com/arfan21/vocagame/internal/model"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"

	productusecase "github.com/arfan21/vocagame/internal/product/usecase"
)

// ProductUsecase is an autogenerated mock type for the ProductUsecase type
type ProductUsecase struct {
	mock.Mock
}

type ProductUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductUsecase) EXPECT() *ProductUsecase_Expecter {
	return &ProductUsecase_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: ctx
func (_m *ProductUsecase) Begin(ctx context.Context) (pgx.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 pgx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (pgx.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) pgx.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductUsecase_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type ProductUsecase_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ProductUsecase_Expecter) Begin(ctx interface{}) *ProductUsecase_Begin_Call {
	return &ProductUsecase_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *ProductUsecase_Begin_Call) Run(run func(ctx context.Context)) *ProductUsecase_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ProductUsecase_Begin_Call) Return(_a0 pgx.Tx, _a1 error) *ProductUsecase_Begin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductUsecase_Begin_Call) RunAndReturn(run func(context.Context) (pgx.Tx, error)) *ProductUsecase_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id, isForUpdate
func (_m *ProductUsecase) GetByID(ctx context.Context, id string, isForUpdate bool) (model.ProductResponse, error) {
	ret := _m.Called(ctx, id, isForUpdate)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.ProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (model.ProductResponse, error)); ok {
		return rf(ctx, id, isForUpdate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) model.ProductResponse); ok {
		r0 = rf(ctx, id, isForUpdate)
	} else {
		r0 = ret.Get(0).(model.ProductResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, id, isForUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductUsecase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ProductUsecase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - isForUpdate bool
func (_e *ProductUsecase_Expecter) GetByID(ctx interface{}, id interface{}, isForUpdate interface{}) *ProductUsecase_GetByID_Call {
	return &ProductUsecase_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id, isForUpdate)}
}

func (_c *ProductUsecase_GetByID_Call) Run(run func(ctx context.Context, id string, isForUpdate bool)) *ProductUsecase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *ProductUsecase_GetByID_Call) Return(_a0 model.ProductResponse, _a1 error) *ProductUsecase_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductUsecase_GetByID_Call) RunAndReturn(run func(context.Context, string, bool) (model.ProductResponse, error)) *ProductUsecase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// ReduceStock provides a mock function with given fields: ctx, id, qty
func (_m *ProductUsecase) ReduceStock(ctx context.Context, id string, qty int) error {
	ret := _m.Called(ctx, id, qty)

	if len(ret) == 0 {
		panic("no return value specified for ReduceStock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, id, qty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductUsecase_ReduceStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReduceStock'
type ProductUsecase_ReduceStock_Call struct {
	*mock.Call
}

// ReduceStock is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - qty int
func (_e *ProductUsecase_Expecter) ReduceStock(ctx interface{}, id interface{}, qty interface{}) *ProductUsecase_ReduceStock_Call {
	return &ProductUsecase_ReduceStock_Call{Call: _e.mock.On("ReduceStock", ctx, id, qty)}
}

func (_c *ProductUsecase_ReduceStock_Call) Run(run func(ctx context.Context, id string, qty int)) *ProductUsecase_ReduceStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *ProductUsecase_ReduceStock_Call) Return(_a0 error) *ProductUsecase_ReduceStock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductUsecase_ReduceStock_Call) RunAndReturn(run func(context.Context, string, int) error) *ProductUsecase_ReduceStock_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: tx
func (_m *ProductUsecase) WithTx(tx pgx.Tx) *productusecase.UseCase {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 *productusecase.UseCase
	if rf, ok := ret.Get(0).(func(pgx.Tx) *productusecase.UseCase); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*productusecase.UseCase)
		}
	}

	return r0
}

// ProductUsecase_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type ProductUsecase_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - tx pgx.Tx
func (_e *ProductUsecase_Expecter) WithTx(tx interface{}) *ProductUsecase_WithTx_Call {
	return &ProductUsecase_WithTx_Call{Call: _e.mock.On("WithTx", tx)}
}

func (_c *ProductUsecase_WithTx_Call) Run(run func(tx pgx.Tx)) *ProductUsecase_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pgx.Tx))
	})
	return _c
}

func (_c *ProductUsecase_WithTx_Call) Return(_a0 *productusecase.UseCase) *ProductUsecase_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductUsecase_WithTx_Call) RunAndReturn(run func(pgx.Tx) *productusecase.UseCase) *ProductUsecase_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductUsecase creates a new instance of ProductUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductUsecase {
	mock := &ProductUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
